#!/usr/bin/env python
# -*- coding: utf-8 -*-
## generated by wxGlade 0.6.5 (standalone edition) on Tue Sep 12 18:55:38 2017
#
#author:miaoxu
## begin wxGlade: extracode
## end wxGlade
#
#
from wx._core import wx, MenuBar, Menu, CallAfter, ACCEL_CTRL, ACCEL_ALT,\
    ACCEL_NORMAL, WXK_F1
from wx.grid import Grid, PyGridTableBase, GridCellAttr, GridEvent
import wx.grid
from ticketSpider.TicketAPI import  queryCityMap, stations_cn, check_pic_url,\
    getLocationByPos, getCheciImg, verifyCheckCode, loginTo, isLogin,\
    submitOrderRequest, seatType, checkOrderInfo,\
getPassengerDTOs, InitWc, InitDc, getQueueCount, confirmGoForQueue,\
    confirmSingleForQueue, queryOrderWaitTime, resultOrderForWcQueue,\
    seatTypeMap
from wx._controls import Notebook
from wx._windows import Panel
from urllib import urlopen
import io
import urllib2
import cStringIO
import urllib
from symbol import except_clause
import random
from wx.lib.buttons import GenBitmapToggleButton
from wx.tools.Editra.src.extern.pubsub import Publisher
import sys
from gui.myView import OrderManagerSizer, OrderManagerPanel, LastItemBtnRenderer
import time
from wx._misc import MessageBox
from gui.queryTicketParser import queryTicket
import threading
from logging import thread
from threading import Thread
from PIL import Image
import webbrowser
from click.termui import style
INDENTIFY_NUMBER = 10000
#提供选择的座位类型
#8个验证码 选中状态 存储集合 
checkids = []
#已选车次
selectedSeats = []
#全局票 二维表
grid_ticketdatas = []
#已选择的乘客ID
selectedPassenersID =[]
#要购买的的座位
selectedWanredSeats=[]
#所有乘车人信息
passengersInfo =[]

class InputDialog(wx.Dialog):

    def __init__(self, title, func_callBack, themeColor):
        wx.Dialog.__init__(self, None, -1, title, size=(340, 400))
        self.func_callBack = func_callBack
        self.themeColor = themeColor

        self.InitUI() #绘制Dialog的界面

    def InitUI(self):
        panel = wx.Panel(self)

        font = wx.Font(14, wx.SWISS, wx.NORMAL, wx.BOLD)

        accountLabel = wx.StaticText(panel, -1, '账号', pos=(20, 25))
        accountLabel.SetForegroundColour(self.themeColor)
        accountLabel.SetFont(font)

        self.accountInput = wx.TextCtrl(panel, -1, u'请输入账号', pos=(80, 25), size=(220, -1))
        self.accountInput.SetForegroundColour('black')
        self.accountInput.SetFont(font)

        passwordLabel = wx.StaticText(panel, -1, '密码', pos=(20, 70))
        passwordLabel.SetFont(font)
        passwordLabel.SetForegroundColour(self.themeColor)

        self.passwordInput = wx.TextCtrl(panel, -1, u"请输入密码", pos=(80, 70), size=(220, -1), style=wx.TE_PASSWORD)
        self.passwordInput.SetForegroundColour('black')
        self.passwordInput.SetFont(font)
        
                
        #        验证码
#        image_io = cStringIO.StringIO(urllib2.urlopen(check_pic_url).read())
#        tempimg = self.get_img()
#        image = wx.EmptyImage(tempimg.size[0], tempimg.size[1])
##        image=image.ConvertToImage()
#        image.SetData(tempimg.convert("RGB").tostring())
#        image.SetAlphaData(tempimg.convert("RGBA").tostring()[3::4])
#        bitmap = wx.BitmapFromImage(image)
        
#        bmp = wx.BitmapFromImage(wx.ImageFromStream(image_io))
#        bmp=bmp.ConvertToImage()
#        bmp=bmp.ConvertToBitmap()
#        check_png  = wx.StaticBitmap(panel,-1,bitmap=bitmap,pos=(20,105))
#        self.Bind(wx.EVT_LEFT_DOWN, self.checkbmpEvent, check_png)
  
#        a = wx.StaticBitmap(panel,-1,  bitmap,pos=(20,105))
#    手动识别验证码
        tempimg = getCheciImg()
        self.get_question_extract(tempimg)
        num =0
        for y in range(2):
            for x in range(4):
                im2 = self.get_sub_img(tempimg, x, y)
        #            im2.show()
                im2.save('temp{}.png'.format(num))
                num= num+1
        
        
        image = wx.Image('question.png',wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        wx.StaticBitmap(panel, -1, bmp, pos=(20,110))
        
        image = wx.Image('temp0.png',wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        self.btn_0=GenBitmapToggleButton(panel, 0, bmp, pos=(20,148))
        
        image = wx.Image('temp1.png',wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        self.btn_1=GenBitmapToggleButton(panel, 1, bmp, pos=(97,148))
        
        image = wx.Image('temp2.png',wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        self.btn_2=GenBitmapToggleButton(panel, 2, bmp, pos=(174,148))
        
        image = wx.Image('temp3.png',wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        self.btn_3=GenBitmapToggleButton(panel, 3, bmp, pos=(251,148))
        
        image = wx.Image('temp4.png',wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        self.btn_4=GenBitmapToggleButton(panel,4, bmp, pos=(20,225))
        
        image = wx.Image('temp5.png',wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        self.btn_5=GenBitmapToggleButton(panel, 5, bmp, pos=(97,225))
        
        image = wx.Image('temp6.png',wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        self.btn_6=GenBitmapToggleButton(panel, 6, bmp, pos=(174,225))
        
        image = wx.Image('temp7.png',wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        self.btn_7=GenBitmapToggleButton(panel, 7, bmp, pos=(251,225))
        self.Bind(wx.EVT_BUTTON, self.onbtnCheckClick, self.btn_0)
        self.Bind(wx.EVT_BUTTON, self.onbtnCheckClick, self.btn_1)
        self.Bind(wx.EVT_BUTTON, self.onbtnCheckClick, self.btn_2)
        self.Bind(wx.EVT_BUTTON, self.onbtnCheckClick, self.btn_3)
        self.Bind(wx.EVT_BUTTON, self.onbtnCheckClick, self.btn_4)
        self.Bind(wx.EVT_BUTTON, self.onbtnCheckClick, self.btn_5)
        self.Bind(wx.EVT_BUTTON, self.onbtnCheckClick, self.btn_6)
        self.Bind(wx.EVT_BUTTON, self.onbtnCheckClick, self.btn_7)
#        登陆取消按钮
        sureButton = wx.Button(panel, -1, u'登录', pos=(40, 310), size=(120, 40))
        sureButton.SetForegroundColour('white')
        sureButton.SetBackgroundColour(self.themeColor)
        # 为【确定Button】绑定事件
        self.Bind(wx.EVT_BUTTON, self.sureEvent, sureButton)

        cancleButton = wx.Button(panel, -1, u'取消', pos=(180, 310), size=(120, 40))
        cancleButton.SetBackgroundColour(self.themeColor)
        cancleButton.SetForegroundColour('white')
        # 为【取消Button】绑定事件
        self.Bind(wx.EVT_BUTTON, self.cancleEvent, cancleButton)
        
    def onbtnCheckClick(self,event):
        global  checkids 
        id = event.GetEventObject().GetId()
        if( checkids.count(id)>0):
            checkids.remove(id)
        else:
            checkids.append(id)
        print  checkids
        
    def get_question_extract(self ,im):
        im = im.crop((0, 0, 290, 29))
        im.save('question.png')

    def get_sub_img(self,im, x, y):
        assert 0 <= x <= 3
        assert 0 <= y <= 2
        WITH = HEIGHT = 67
        left = 5 + (67 + 5) * x
        top = 41 + (67 + 5) * y
        right = left + 67
        bottom = top + 67
        return im.crop((left, top, right, bottom))

    def get_img(self):
        resp = urllib.urlopen(check_pic_url+'&'+ str(random.random()))
        raw = resp.read()
        with open("./tmp.jpg", 'wb') as fp:
            fp.write(raw)
        return Image.open("./tmp.jpg")  
         
    def checkbmpEvent(self,event):
        print event.getx()
        
        

    def sureEvent(self, event):
        account = self.accountInput.GetValue()
        password = self.passwordInput.GetValue()
        # 通过回调函数传递数值
        self.func_callBack(account, password)
        self.Destroy() #销毁隐藏Dialog
        
    def cancleEvent(self, event):
        self.Destroy() #销毁隐藏Dialog
        
class LoginDialog(InputDialog):
    def __init__(self, func_callBack, themeColor):
        InputDialog.__init__(self, '登录系统', func_callBack, themeColor)
        
class MyFrame(wx.Frame):
    def __init__(self,callBack, *args, **kwds):
        self.ticketdatas = []
        # begin wxGlade: MyFrame.__init__
#        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        
        wx.Frame.__init__(self, *args, **kwds)
        self.SetBackgroundColour('gray')
        self.callBack  = callBack 
        self.SetMinSize([1350,700])
        statusbar = self.app_frame_statusbar = self.CreateStatusBar(1, 0)#1 创建状态栏
#        self.SetMaxSize([1350,700])
#        toolbar = self.CreateToolBar()#2 创建工具栏
#        toolbar.AddSimpleTool(wx.NewId(), images.getNewBitmap(),
#                              'New', "Long help for ’New") #3 给工具栏增加一个工具
    
#        增加菜单栏
        self.menuBar = MenuBar(style = wx.MENU_TEAROFF)
        menu1 = Menu()
        self.login = menu1.Append(wx.NewId(),"&登陆\tF1")
        self.regis = menu1.Append(wx.NewId(),"注册")
        self.menuBar.Append(menu1,"用户")
        menu2 = Menu()
        self.menuBar.Append(menu2,"其他")
        self.menu12306 = Menu()
        self.menuBar.Append(self.menu12306,"12306官网")
        self.check_update = menu2.Append(wx.NewId(),"检查更新","")
        self.sync_time = menu2.Append(wx.NewId(),"同步服务器时间")
        menu2.AppendSeparator()
        self.home12306=menu2.Append(wx.NewId(),"12306Easy官网")
        self.SetMenuBar(self.menuBar)
#        绑定快捷键
        acceltbl = wx.AcceleratorTable( [ 
#        (ACCEL_CTRL, ord("W"), self.login.GetId())
            (ACCEL_NORMAL, WXK_F1, self.login.GetId())
        ])
        self.SetAcceleratorTable(acceltbl)
#        头部标签页
        self.notebook = wx.Notebook(self, -1, style=0)
        self.notebook_pane_1 = wx.Panel(self.notebook, -1)
#        自定义panel
        self.notebook_pane_2 = OrderManagerPanel(self.notebook, -1)
        
        #        底部TAB页
        self.notebook_bottom = wx.Notebook(self.notebook_pane_1, -1, style=0)
        self.notebook_panel_buy_set = wx.Panel(self.notebook_bottom, -1)
        self.notebook_panel_query = wx.Panel(self.notebook_bottom, -1)
        self.notebook_panel_check_set = wx.Panel(self.notebook_bottom, -1)
        self.notebook_panel_qqnotice = wx.Panel(self.notebook_bottom, -1)
        self.notebook_panel_emainotice = wx.Panel(self.notebook_bottom, -1)
        self.notebook_panel_wechartnotice = wx.Panel(self.notebook_bottom, -1)
        self.notebook_panel_phonenotice = wx.Panel(self.notebook_bottom, -1)
        
        self.notebook_bottom_left_staticbox_1 = wx.StaticBox(self.notebook_panel_buy_set, -1, "选择乘客")
        self.notebook_bottom_left_staticbox_2 = wx.StaticBox(self.notebook_panel_buy_set, -1, "选择座位")
        self.notebook_bottom_left_staticbox_3 = wx.StaticBox(self.notebook_panel_buy_set, -1, "已选车次")
        self.notebook_bottom_left_staticbox_4 = wx.StaticBox(self.notebook_panel_buy_set, -1, "使用说明")   
        
        self.notebook_bottom_middle_staticbox_1 = wx.StaticBox(self.notebook_pane_1, -1, "输出区")
        self.notebook_bottom_right_staticbox_2 = wx.StaticBox(self.notebook_pane_1, -1, "设置区")
        
        self.check_seats = []
        for  index  in range(len(seatType)):
            check_seat =wx.CheckBox(self.notebook_panel_buy_set,INDENTIFY_NUMBER+ index, seatType[index])
            self.check_seats.append(check_seat)
            
#        已选车次
#        sampleList = ['zero', 'one', 'two', 'three', 'four', 'five',
#                      'six', 'seven', 'eight', 'nine', 'ten', 'eleven',
#                      'twelve', 'thirteen', 'fourteen']
        sampleList = []
        self.selectedTrainsListBox =  wx.ListBox(self.notebook_panel_buy_set, -1,size=(100,100))
        self.selectedTrainsListBox.SetItems(sampleList)
        
        self.output_area = wx.TextCtrl(self.notebook_pane_1, -1, u'这里是输出显示区',style = wx.TE_READONLY| wx.TE_MULTILINE)
        font = wx.Font(11, wx.SWISS, wx.NORMAL, wx.BOLD)
        self.output_area.SetFont(font)
        self.output_area.SetForegroundColour('#0a74f7')
        
        self.radio_btn_1 = wx.RadioButton(self.notebook_pane_1, -1, "单程")
        self.radio_btn_2 = wx.RadioButton(self.notebook_pane_1, -1, "往返")
        self.sizer_6_staticbox = wx.StaticBox(self.notebook_pane_1, -1, "")
        self.label_2 = wx.StaticText(self.notebook_pane_1, -1, "出发地")
        self.origin = wx.TextCtrl(self.notebook_pane_1, -1, "")
        self.label_3 = wx.StaticText(self.notebook_pane_1, -1, "目的地")
        self.destination = wx.TextCtrl(self.notebook_pane_1, -1, "")
        self.label_4 = wx.StaticText(self.notebook_pane_1, -1, "出发日")
        self.datepicker_go = wx.DatePickerCtrl(self.notebook_pane_1, -1)
        self.label_5 = wx.StaticText(self.notebook_pane_1, -1, "往返日")
        self.datepicker_come = wx.DatePickerCtrl(self.notebook_pane_1, -1)
        self.radio_btn_4 = wx.RadioButton(self.notebook_pane_1, 1, "普通")
        self.radio_btn_5 = wx.RadioButton(self.notebook_pane_1, 1, "学生")
        self.sizer_14_staticbox = wx.StaticBox(self.notebook_pane_1, -1, "")
        self.btn_query= wx.Button(self.notebook_pane_1, -1, "查询")
        self.checkbox_auto = wx.CheckBox(self.notebook_pane_1, -1, "开启自动查询")
        self.sizer_5_staticbox = wx.StaticBox(self.notebook_pane_1, -1, "")
        self.label_carType = wx.StaticText(self.notebook_pane_1, -1, "车次类型：")
        self.btn_all = wx.Button(self.notebook_pane_1, -1, "全部")
        self.checkbox_GC = wx.CheckBox(self.notebook_pane_1, -1, "GC-高铁/城际")
        self.checkbox_D = wx.CheckBox(self.notebook_pane_1, -1, "D-动车")
        self.checkbox_Z = wx.CheckBox(self.notebook_pane_1, -1, "Z-直达")
        self.checkbox_T = wx.CheckBox(self.notebook_pane_1, -1, "T-特快")
        self.checkbox_K = wx.CheckBox(self.notebook_pane_1, -1, "K-快速")
        self.checkbox_Other = wx.CheckBox(self.notebook_pane_1, -1, "其他")
        self.data_grd = Grid(self.notebook_pane_1, -1, size=(1, 1))
        
                
        self.__set_properties()
        self.__do_layout()
        self.__bindBtnEvent()
        # end wxGlad
        
    #     绑定按键事件  
    def __bindBtnEvent(self):
        self.Bind(wx.EVT_BUTTON, self.onQueryClick, self.btn_query)  
        self.Bind(wx.EVT_MENU, self.showDialog,self.login)
        self.Bind(wx.EVT_MENU, self.showDialog,self.regis)
        self.Bind(wx.EVT_MENU, self.showDialog,self.sync_time)
        self.Bind(wx.EVT_MENU, self.fun_jump_pay,self.home12306)
        
        self.Bind(wx.EVT_CHECKBOX,self.filterTicket,self.checkbox_GC)
        self.Bind(wx.EVT_CHECKBOX,self.filterTicket,self.checkbox_D)
        self.Bind(wx.EVT_CHECKBOX,self.filterTicket,self.checkbox_T)
        self.Bind(wx.EVT_CHECKBOX,self.filterTicket,self.checkbox_Z)
        self.Bind(wx.EVT_CHECKBOX,self.filterTicket,self.checkbox_K)
        self.Bind(wx.EVT_CHECKBOX,self.filterTicket,self.checkbox_Other)
        self.Bind(wx.EVT_BUTTON,self.btn_selectAll,self.btn_all)
        
        self.Bind(wx.grid.EVT_GRID_CELL_LEFT_CLICK , self.OnItemSelected, self.data_grd)
        self.Bind(wx.grid.EVT_GRID_CELL_LEFT_DCLICK, self.OnItemDoubleClick, self.data_grd)
        self.Bind(wx.grid.EVT_GRID_CELL_RIGHT_CLICK, self.OnItemRightClick, self.data_grd)
        
#        选择座位监听
        for seat in self.check_seats:
            self.notebook_panel_buy_set.Bind(wx.EVT_CHECKBOX, self.fun_selectWantedSeats, seat)   
            
    def buyTicket(self,row,col):
        query_from_station_name = self.origin.GetValue()
        query_to_station_name = self.destination.GetValue()
        selectTime = self.datepicker_go.GetValue()
        train_date = selectTime.Format('%Y-%m-%d')
        back_train_date = train_date
        purpose_codes = 'ADULT'
        print "预定车次",grid_ticketdatas[row][15]
#            1 初始化订单
        submit = submitOrderRequest(grid_ticketdatas[row][15],train_date, back_train_date, purpose_codes, query_from_station_name, query_to_station_name)
        if submit:
#                2检查订单
            global selectedPassenersID
            global selectedWanredSeats
            seatNO = "O"
            passengerTicketStr = ""
            oldPassengerStr = ""
            
            for want in selectedWanredSeats:
                seatNO = seatTypeMap[seatType[want]]
            passInfo = ""
            for passenerID in selectedPassenersID:
                for temp in passengersInfo:
                    if temp.code== passenerID: #找到ID匹配的乘客信息
                        passInfo = temp
                        break
                passengerTicketStr += '%s,%s,%s,%s,%s,%s,%s,N_' % (
                seatNO,
                0,# TODO [0->随机][1->下铺][2->中铺][3->上铺]
                passInfo.passenger_type,
                passInfo.passenger_name,
                passInfo.passenger_id_type_code,
                passInfo.passenger_id_no,
                passInfo.mobile_no)
            
                oldPassengerStr += '%s,%s,%s,1_' % (
                   passInfo.passenger_name,
                   passInfo.passenger_id_type_code,
                   passInfo.passenger_id_no
                )
#                去掉最后一个_
            passengerTicketStr = passengerTicketStr[0:len(passengerTicketStr)-1]
            check=checkOrderInfo(passengerTicketStr, oldPassengerStr)
            if check:
#                    train_date_stand = selectTime.Format(wx.DefaultDateTimeFormat)
#                    train_date_stand = "Wed Sep 28 2017 00:00:00 GMT+0800 (中国标准时间)"
#                    time.strftime(u"%a %b  %d %Y 00:00:00  GMT+0800 (中国标准时间)", time.gmtime())
                train_date_stand = selectTime.Format('%a %b  %d %Y 00:00:00  GMT+0800 ' )
             
                train_no_Long = grid_ticketdatas_2[row].train_no_Long
                train_no = grid_ticketdatas_2[row].train_no
                fromStationTelecode = grid_ticketdatas_2[row].fromStationTelecode
                toStationTelecode = grid_ticketdatas_2[row].toStationTelecode
                leftTicket = grid_ticketdatas_2[row].leftTicket
                train_location = grid_ticketdatas_2[row].train_location
                wantseatType ="O"
#                   3查询订单队列
                queencount = getQueueCount(train_date_stand,train_no, train_no_Long, wantseatType, fromStationTelecode, toStationTelecode, leftTicket, train_location)
                if queencount:
#                        4提交到订单队列
                    if confirmSingleForQueue(train_location, leftTicket,passengerTicketStr,oldPassengerStr):
                            MessageBox('订单下达成功，请速去支付')
                            pass
#                            5 获取订单号
                            orderID = queryOrderWaitTime()
                            if orderID is None:
                                pass
                            else:
#                                    6正式提交订单
                                resultOrderForWcQueue(orderID)
                                
    def OnItemSelected(self,event):
        row =  event.GetRow()
        col = event.GetCol()
        global grid_ticketdatas
        global grid_ticketdatas_2
        if ( col ==( self.data_grd.GetNumberCols()-1)) and("预订" in grid_ticketdatas[row][col]) :#最后1列 点击预订
            print  grid_ticketdatas[row][col]
            self.buyTicket(row, col)
        elif col ==0:#第0列 火车班次
            print   grid_ticketdatas[row][col]
            print col
        else:
            self.data_grd.ClearSelection()#清除掉之前的选项
            self.data_grd.SelectRow(row,True)#让当前一整行为选择状态
            
#            表格点击选中之后，如果这一条 已经在已添加车次，则高亮这一条信息
            global selectedSeats
            for index in range(len(selectedSeats)):
                if selectedSeats[index] in  grid_ticketdatas[row][0]:
                    self.selectedTrainsListBox.SetSelection(index)
                    return 
            self.selectedTrainsListBox.SetSelection(-1)
#    添加到已选车次
    def OnItemDoubleClick(self,event):
        row = event.GetRow()
        global grid_ticketdatas
        global selectedSeats
        trainName = grid_ticketdatas[row][0]
        index = self.selectedTrainsListBox.FindString(trainName) 
        if  index == -1:
            self.selectedTrainsListBox.Append(trainName)
            selectedSeats.append(trainName)
#            最后一个添加的为选中状态
            self.selectedTrainsListBox.SetSelection(len(selectedSeats)-1) 
        else:
            self.selectedTrainsListBox.Delete(index)
            selectedSeats.remove(trainName)
        print "已选车次 {}".format(selectedSeats)
        
    def OnItemRightClick(self,event):
        self.data_grd.ClearSelection()
#        MessageBox('右键选择{}行{}列'.format(event.GetRow(),event.GetCol()))
    
#    登陆回调
    def logincallbakc(self ,account, password):
        #        启动线程请求数据 并刷新UI
        t1 = threading.Thread(target=self.logincallbak_thread, args=(account,password))
        t1.start()
        Publisher().subscribe(self.updateSizer_bottom_left_staticBoxSizer,"update")
        
    def logincallbak_thread(self ,account, password):
        global checkids
        k = getLocationByPos(checkids)
        if verifyCheckCode(k):
            result = loginTo(account,password)
            if  result   :#登录成功 在菜单显示名字 ,同事刷新 抢票设置-》乘客信息
#                self.updateSizer_bottom_left_staticBoxSizer(account, result)
#                MessageBox(account,'登录成功')
#                getGlobalRepeatSubmitToken()
                CallAfter(Publisher().sendMessage, "update", [account,result]) 
            else:
                MessageBox('登录失败原因：获取联系人失败')
                print '登录失败原因：获取联系人失败'
        else:
            MessageBox("验证码错误")
            print '验证码错误'
        print '登陆回调',k
#    更新左下角的 选择乘客列表
    def updateSizer_bottom_left_staticBoxSizer(self,msg):
        global passengersInfo
        account = msg.data[0]
        passengersInfo = msg.data[1]

        global app_frame
        app_frame.updateStatusBar(["当前登录账号:{}".format(account)])
        print "登陆人",account 
        contain =  app_frame.sizer_bottom_left_staticBoxSizer_select_passers
        contain.Clear()
#        创建乘车人checkbox
        for passener in passengersInfo:
            check_1 =wx.CheckBox(self.notebook_panel_buy_set, passener.code,'{}[{}]'.format(passener.passenger_name,passener.passenger_type_name))
#            选择乘车人信息
            self.notebook_panel_buy_set.Bind(wx.EVT_CHECKBOX, self.fun_selectPasseners, check_1)
            contain.Add(check_1, 0, wx.EXPAND, 1)
        contain.Layout()
    
#    选择要购票的乘客
    def fun_selectPasseners(self,event):
        ckevent = event.GetEventObject()
        global selectedPassenersID
        if(ckevent.IsChecked()):
            if(len(selectedPassenersID)>5):
                print "每次购票最多可选择5名乘客!"
                ckevent.SetValue(False)
            else:
                selectedPassenersID.append(ckevent.GetId())
                print "选中了一个人{}".format( ckevent.GetLabelText())
        else:
            selectedPassenersID.remove(ckevent.GetId())
            print "取消了一个人{}".format( ckevent.GetLabelText())
        print selectedPassenersID

#    选择要选择的座位
    def fun_selectWantedSeats(self,event):
        ckevent = event.GetEventObject()
        global selectedWanredSeats
        if(ckevent.IsChecked()):
            selectedWanredSeats.append(ckevent.GetId()-INDENTIFY_NUMBER)
            print "选中了车次 {}".format( ckevent.GetLabelText())
        else:
            selectedWanredSeats.remove(ckevent.GetId()-INDENTIFY_NUMBER)
            print "取消了车次{}".format( ckevent.GetLabelText())
        print selectedWanredSeats
        
    def fun_jump_pay(self,event):
        webbrowser.open_new_tab('https://kyfw.12306.cn/otn/queryOrder/initNoComplete')
        
    def showDialog(self,event):
        global log_dia
        global     checkids 
        checkids = []
        try:
            if  log_dia.IsShown() == False :
                log_dia = LoginDialog(self.logincallbakc, '#0a74f7')
                log_dia.Show()
            else:
                log_dia.Hide()
                log_dia = LoginDialog(self.logincallbakc, '#0a74f7')
                log_dia.Show()
        except:
            log_dia = LoginDialog(self.logincallbakc, '#0a74f7')
            log_dia.Show()
        
    def onQueryClick(self,event):  
#        获取参数
        begin = self.origin.GetValue()
        des = self.destination.GetValue()
        goTime = self.datepicker_go.GetValue().Format('%Y-%m-%d')

        print 'onQueryClick 出发地：{}  目的地：{} 时间 ：{}'.format(begin, des,goTime)
#        启动线程请求数据 并刷新UI
        t1 = threading.Thread(target=self.fun_queryTicket, args=(begin,des,goTime))
        t1.start()
        
    def fun_queryTicket(self,begin,des,goTime):
        global grid_ticketdatas
        global grid_ticketdatas_2
        grid_ticketdatas,grid_ticketdatas_2 =  queryTicket(begin,des,goTime)
        self.data = GridData(grid_ticketdatas)
#        attr = GridCellAttr()
#        attr.SetRenderer(LastItemBtnRenderer())
#        self.data_grd.SetColAttr(14,attr)
        self.data_grd.SetTable(self.data)
        self.data_grd.Refresh()
       
#       全选或者反选
    def btn_selectAll(self,event):
        if (self.checkbox_GC.IsChecked() or self.checkbox_D.IsChecked() or self.checkbox_T.IsChecked()
                 or self.checkbox_Z.IsChecked() or self.checkbox_K.IsChecked() or self.checkbox_Other.IsChecked()):
            self.checkbox_GC.SetValue(False)
            self.checkbox_D.SetValue(False)  
            self.checkbox_T.SetValue(False)
            self.checkbox_Z.SetValue(False)
            self.checkbox_K.SetValue(False)
            self.checkbox_Other.SetValue(False)
        else:
            self.checkbox_GC.SetValue(True) 
            self.checkbox_D.SetValue(True)  
            self.checkbox_T.SetValue(True)
            self.checkbox_Z.SetValue(True)
            self.checkbox_K.SetValue(True)
            self.checkbox_Other.SetValue(True)
        self.filterTicket()
        
    def filterTicket(self,event=None):
        filtercondition = []
        if self.checkbox_GC.IsChecked():
                filtercondition.append('G')
                filtercondition.append('C')
        if self.checkbox_D.IsChecked():
            filtercondition.append('D')
        if self.checkbox_T.IsChecked():
            filtercondition.append('T')
        if self.checkbox_Z.IsChecked():
            filtercondition.append('Z')
        if self.checkbox_K.IsChecked():
            filtercondition.append('K')
        if self.checkbox_Other.IsChecked():
            filtercondition.append('O')
        
        tempticket = []
#        print filtercondition
        if len(filtercondition) == 0:
            global grid_ticketdatas
            tempticket = grid_ticketdatas
        else :
            for ticket in grid_ticketdatas:#筛选火车票车次 首字母
                if ticket[0][0] in filtercondition:
    #                print ticket[0]
                    tempticket.append(ticket)
        self.data = GridData(tempticket)#过滤后刷新表格
        self.data_grd.SetTable(self.data)
        self.data_grd.Refresh()
    
#    更新状态栏内容
    def updateStatusBar(self, statusbar_content = ["未登录，请先登录"]):
        # statusbar fields
        for i in range(len(statusbar_content)):
            self.app_frame_statusbar.SetStatusText(statusbar_content[i], i)
            
    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.app_frame_statusbar.SetStatusWidths([-1])
        self.updateStatusBar()
        self.radio_btn_2.SetFocus()
        self.radio_btn_4.SetValue(1)
        self.radio_btn_5.SetValue(1)
        self.data_grd.CreateGrid(0, 15)
        self.data_grd.SetRowLabelSize(30)
        self.data_grd.SetColLabelSize(30)
        self.data_grd.EnableEditing(False)
        self.data_grd.HideRowLabels()#隐藏自动生成的序号
        self.data_grd.EnableDragColSize(True)
        self.data_grd.EnableDragRowSize(False)
        self.data_grd.SetLabelBackgroundColour(wx.Colour(127, 193, 255))
        self.data_grd.SetColLabelValue(0, "车次")
        self.data_grd.SetColLabelValue(1, "出发站/到达站")
        self.data_grd.SetColLabelValue(2, "出发时间/到达时间")
        self.data_grd.SetColLabelValue(3, "历时")
        self.data_grd.SetColLabelValue(4, "商务座/特等座")
        self.data_grd.SetColLabelValue(5, "一等座")
        self.data_grd.SetColLabelValue(6, "二等座")
        self.data_grd.SetColLabelValue(7, "高级软卧")
        self.data_grd.SetColLabelValue(8, "软卧")
        self.data_grd.SetColLabelValue(9, "动卧")
        self.data_grd.SetColLabelValue(10, "软座")
        self.data_grd.SetColLabelValue(11, "硬座")
        self.data_grd.SetColLabelValue(12, "无")
        self.data_grd.SetColLabelValue(13, "其他")
        self.data_grd.SetColLabelValue(14, "备注")
        # end wxGlade
    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
#        sizer_0 = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_bottom = wx.BoxSizer(wx.HORIZONTAL)
        
        self.notebook_bottom_middle_staticbox_1.Lower()
        self.notebook_bottom_right_staticbox_2.Lower()
        
        sizer_bottom_left = wx.BoxSizer(wx.VERTICAL)
        sizer_bottom_middle =   wx.StaticBoxSizer(self.notebook_bottom_middle_staticbox_1, wx.HORIZONTAL)
        sizer_bottom_right =  wx.StaticBoxSizer(self.notebook_bottom_right_staticbox_2, wx.HORIZONTAL)
        

        sizer_bottom_middle.Add(self.output_area, 1,wx.EXPAND, 0)
        self.notebook_bottom_left_staticbox_1.Lower()
        self.notebook_bottom_left_staticbox_2.Lower()
        self.notebook_bottom_left_staticbox_3.Lower()
        self.notebook_bottom_left_staticbox_4.Lower()
        self.sizer_bottom_left_staticBoxSizer_select_passers =   wx.StaticBoxSizer(self.notebook_bottom_left_staticbox_1, wx.VERTICAL)
        self.sizer_bottom_left_staticBoxSizer_select_seats =   wx.StaticBoxSizer(self.notebook_bottom_left_staticbox_2, wx.VERTICAL)
        self.sizer_bottom_left_staticBoxSizer_select_trains =   wx.StaticBoxSizer(self.notebook_bottom_left_staticbox_3, wx.VERTICAL)
        sizer_bottom_left_staticBoxSizer_instruction =   wx.StaticBoxSizer(self.notebook_bottom_left_staticbox_4, wx.VERTICAL)
        
        sizer_bottom_left_buy_set_content = wx.BoxSizer(wx.HORIZONTAL)
        sizer_bottom_left_buy_set_content_select_user = wx.BoxSizer(wx.VERTICAL)
        sizer_bottom_left_buy_set_content_selelct_seat = wx.BoxSizer(wx.VERTICAL)
        sizer_bottom_left_buy_set_content_train_type = wx.BoxSizer(wx.VERTICAL)
        sizer_bottom_left_buy_set_content_explanation = wx.BoxSizer(wx.VERTICAL)  
        
        grid_sizer_1 = wx.GridSizer(2, 10, 0, 0)
        self.sizer_5_staticbox.Lower()
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_14_staticbox.Lower()
        sizer_14 = wx.StaticBoxSizer(self.sizer_14_staticbox, wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_6_staticbox.Lower()
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.VERTICAL)
        sizer_6.Add(self.radio_btn_1, 0, 0, 0)
        sizer_6.Add(self.radio_btn_2, 0, 0, 0)
        sizer_5.Add(sizer_6, 0, wx.EXPAND, 0)
        sizer_8.Add(self.label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_8.Add(self.origin, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_7.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_5.Add(sizer_7, 0, wx.ALL | wx.EXPAND, 10)
        sizer_9.Add(self.label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_9.Add(self.destination, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(sizer_9, 0, wx.ALL | wx.EXPAND, 10)
        sizer_10.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_10.Add(self.datepicker_go, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(sizer_10, 0, wx.ALL | wx.EXPAND, 10)
        sizer_11.Add(self.label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_11.Add(self.datepicker_come, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(sizer_11, 0, wx.ALL | wx.EXPAND, 10)
        sizer_14.Add(self.radio_btn_4, 0, 0, 0)
        sizer_14.Add(self.radio_btn_5, 0, 0, 0)
        sizer_12.Add(sizer_14, 0, wx.EXPAND, 0)
        sizer_5.Add(sizer_12, 0, wx.EXPAND, 0)
        sizer_13.Add(self.btn_query, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_13.Add(self.checkbox_auto, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_5.Add(sizer_13, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_carType, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.btn_all, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.checkbox_GC, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.checkbox_D, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.checkbox_Z, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.checkbox_T, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.checkbox_K, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.checkbox_Other, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        


        #     底部TAB页 
#        check_1 =wx.CheckBox(self.notebook_panel_buy_set, -1, "人物1")
#        check_2 =wx.CheckBox(self.notebook_panel_buy_set, -1, "人物1")
#        check_3 =wx.CheckBox(self.notebook_panel_buy_set, -1, "人物1")
#        check_4 =wx.CheckBox(self.notebook_panel_buy_set, -1, "人物1")
#        self.sizer_bottom_left_staticBoxSizer_select_passers.Add(check_1, 0, wx.EXPAND, 0)
#        self.sizer_bottom_left_staticBoxSizer_select_passers.Add(check_2, 0, wx.EXPAND, 0)
#        self.sizer_bottom_left_staticBoxSizer_select_passers.Add(check_3, 0, wx.EXPAND, 0)
#        self.sizer_bottom_left_staticBoxSizer_select_passers.Add(check_4, 0, wx.EXPAND, 0)
        
        for seat in self.check_seats:
            self.sizer_bottom_left_staticBoxSizer_select_seats.Add(seat,0,wx.EXPAND, 0)
        
        self.sizer_bottom_left_staticBoxSizer_select_trains.Add(self.selectedTrainsListBox,wx.EXPAND,0)
        
        sizer_bottom_left_buy_set_content_select_user.Add(self.sizer_bottom_left_staticBoxSizer_select_passers, 1, wx.EXPAND, 0)
        sizer_bottom_left_buy_set_content_selelct_seat.Add(self.sizer_bottom_left_staticBoxSizer_select_seats, 1, wx.EXPAND, 0)
        sizer_bottom_left_buy_set_content_train_type.Add(self.sizer_bottom_left_staticBoxSizer_select_trains, 1, wx.EXPAND, 0)
        sizer_bottom_left_buy_set_content_explanation.Add(sizer_bottom_left_staticBoxSizer_instruction, 1, wx.EXPAND, 0)
               
        sizer_bottom_left_buy_set_content.Add(sizer_bottom_left_buy_set_content_select_user, 1,wx.LEFT | wx.RIGHT | wx.EXPAND, 5)
        sizer_bottom_left_buy_set_content.Add(sizer_bottom_left_buy_set_content_selelct_seat, 1, wx.LEFT | wx.RIGHT | wx.EXPAND, 5)
        sizer_bottom_left_buy_set_content.Add(sizer_bottom_left_buy_set_content_train_type, 1,  wx.LEFT | wx.RIGHT | wx.EXPAND, 5)
        sizer_bottom_left_buy_set_content.Add(sizer_bottom_left_buy_set_content_explanation, 1,wx.LEFT | wx.RIGHT | wx.EXPAND, 5)
           
        self.notebook_panel_buy_set.SetSizer(sizer_bottom_left_buy_set_content)
        self.notebook_bottom.AddPage(self.notebook_panel_buy_set,"抢票设置")
        self.notebook_bottom.AddPage(self.notebook_panel_query,"查询起售")
        self.notebook_bottom.AddPage(self.notebook_panel_check_set,"验证码设置")
        self.notebook_bottom.AddPage(self.notebook_panel_qqnotice,"QQ通知")
        self.notebook_bottom.AddPage(self.notebook_panel_emainotice,"邮件设置")
        self.notebook_bottom.AddPage(self.notebook_panel_wechartnotice,"微信通知")
        self.notebook_bottom.AddPage(self.notebook_panel_phonenotice,"电话通知")
        
        sizer_bottom_left.Add(self.notebook_bottom, 1, wx.EXPAND, 0)
        sizer_bottom.Add(sizer_bottom_left,2, wx.EXPAND, 0)
        sizer_bottom.Add(sizer_bottom_middle,2, wx.EXPAND, 0)
        sizer_bottom.Add(sizer_bottom_right,1, wx.EXPAND, 0)
        
        sizer_4.Add(grid_sizer_1, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_3.Add(self.data_grd, 7, wx.EXPAND, 0)
        sizer_3.Add(sizer_bottom, 7, wx.EXPAND, 0)
        
   
                        
        #        头部tab页面
        self.notebook_pane_1.SetSizer(sizer_3)
#        mOrderManagerSizer = OrderManagerSizer(self.notebook_pane_2,wx.VERTICAL)
#        self.notebook_pane_2.SetSizer(mOrderManagerSizer)
        
        self.notebook.AddPage(self.notebook_pane_1, "抢票页面")
        self.notebook.AddPage(self.notebook_pane_2, "订单管理页面")
        sizer_1.Add(self.notebook, 1, wx.EXPAND, 0)

        
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        
        self.Layout()
        # end wxGlade
        

# end of class MyFrame

#表格数据实体类 必须重写一个PyGridTableBase
class GridData(PyGridTableBase):
    _cols = "车次 出发站/到达站 出发时间/到达时间 历时 商务座/特等座  一等座 二等座 高级软卧 软卧 动卧 软座 硬座 无座位 其他 备注 " .split()
    _data = [
            "1 2 3".split(),
            "4 5 6".split(),
            "7 8 9".split()
            ]
    _highlighted = set()
    def __init__(self, data):
        PyGridTableBase.__init__(self)
        self._data = data or[]

    def GetColLabelValue(self, col):
        return self._cols[col]

    def GetNumberRows(self):
        return len(self._data)

    def GetNumberCols(self):
        return len(self._cols)

    def GetValue(self, row, col):
        return self._data[row][col]

    def SetValue(self, row, col, val):
        self._data[row][col] = val

    def GetAttr(self, row, col, kind):
        attr = GridCellAttr()
        if(row%2==0):
            attr.SetBackgroundColour(wx.WHITE)
        else:
            attr.SetBackgroundColour(wx.WHITE)
            
        if(col == 0 ):
#            attr.SetBackgroundColour( )   
#            attr.SetTextColour(wx.Colour(127, 193, 255))
            font = wx.Font(12, wx.SWISS, wx.NORMAL, wx.BOLD)
            font.SetUnderlined(True)
            attr.SetFont(font)
            attr.SetTextColour(wx.Colour(127, 193, 255))
        elif ( "预订"  in  self._data[row][col] ) and  ( col == (len(self._cols)-1) ) :
            font = wx.Font(12, wx.SWISS, wx.NORMAL, wx.BOLD)
            font.SetUnderlined(True)
            attr.SetFont(font)
            attr.SetTextColour(wx.Colour(127, 193, 255))
        return attr

    def set_value(self, row, col, val):
        self._highlighted.add(row)
        self.SetValue(row, col, val)
    
#log重定向
class TextArea(object):  
    def __init__(self):  
        self.savedStdout = sys.stdout
  
    def write(self, output): 
        global app_frame
        # 1打印打UI中
        t1 = time.strftime('%H:%M:%S',time.localtime(time.time()))
        t2 = "["+t1+"]{}"
        if ('\n' in output) and (len(output)==1):#有时候是单独的换行符\n  要过滤掉 不打时间戳
            pass
        else:
            output = t2.format(output)
        app_frame.output_area.AppendText(output)
        #  2 打印到console
        self.savedStdout.write(output)
        
app = wx.PySimpleApp(0)
wx.InitAllImageHandlers()
app_frame = MyFrame(None,None,-1,title="12306Easy",pos=wx.DefaultPosition)
app.SetTopWindow(app_frame)
#    log重定向
sys.stdout = TextArea()
app_frame.Show()
app.MainLoop()




#def showUI(ticketdata,callBack):
#    app = wx.PySimpleApp(0)
#    wx.InitAllImageHandlers()
#    global app_frame
#    app_frame = MyFrame(callBack,None,-1,title="12306Easy",size=(1350,800),pos=wx.DefaultPosition)
##    app_frame.data = GridData(ticketdata)
##    app_frame.data_grd.SetTable(app_frame.data)
##    app_frame.Show()
#
#    app.MainLoop()
#    queryCityMap()
